package view;

import java.awt.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.SetoranSampahModel;

public class KelolaSetoran extends javax.swing.JFrame {

    /**
     * Creates new form KelolaSetoran
     */
    
    private String namaPenyetor;
    
    public KelolaSetoran() {
        this.namaPenyetor = namaPenyetor;
        initComponents();
        loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        tolakButton = new javax.swing.JButton();
        hapusButton = new javax.swing.JButton();
        konfirmasiButton = new javax.swing.JButton();
        kembaliButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 500));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setBackground(new java.awt.Color(70, 73, 75));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID Setoran", "Nama Penyetor", "Berat (KG)", "Poin", "Status"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 170, 607, 241));

        tolakButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/TolakButton.png"))); // NOI18N
        tolakButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tolakButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tolakButtonActionPerformed(evt);
            }
        });
        getContentPane().add(tolakButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 120, 91, 28));

        hapusButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/HapusButton.png"))); // NOI18N
        hapusButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        hapusButton.setPreferredSize(new java.awt.Dimension(95, 37));
        hapusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hapusButtonActionPerformed(evt);
            }
        });
        getContentPane().add(hapusButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 120, 81, 29));

        konfirmasiButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/KonfirmasiButton.png"))); // NOI18N
        konfirmasiButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        konfirmasiButton.setMaximumSize(new java.awt.Dimension(96, 37));
        konfirmasiButton.setMinimumSize(new java.awt.Dimension(96, 37));
        konfirmasiButton.setPreferredSize(new java.awt.Dimension(95, 37));
        konfirmasiButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                konfirmasiButtonActionPerformed(evt);
            }
        });
        getContentPane().add(konfirmasiButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 120, -1, 28));

        kembaliButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/kembaliButton.png"))); // NOI18N
        kembaliButton.setToolTipText("");
        kembaliButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        kembaliButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kembaliButtonActionPerformed(evt);
            }
        });
        getContentPane().add(kembaliButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 450, 93, 33));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/MenuSetoranSampah.png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadData() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        
        var listSetoran = SetoranSampahModel.getAll();
        for (SetoranSampahModel setoran : listSetoran) {
            model.addRow(new Object[]{
                    setoran.getIdSetoran(),
                    setoran.getNamaPenyetor(),
                    setoran.getBerat(),
                    setoran.getPoin(),
                    setoran.getStatus()
            });
        }
    }
    
    private void updateStatus(String status) {
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
            int idSetoran = (int) jTable1.getValueAt(selectedRow, 0);
            if (SetoranSampahModel.updateStatus(idSetoran, status)) {
                JOptionPane.showMessageDialog(this, "Status berhasil diperbarui!");
                loadData();
            } else {
                JOptionPane.showMessageDialog(this, "Gagal memperbarui status!");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Pilih setoran terlebih dahulu.");
        }
    }
    
    private void hapusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hapusButtonActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
            int confirm = JOptionPane.showConfirmDialog(this, 
                    "Apakah Anda yakin ingin menghapus data ini?", 
                    "Konfirmasi Hapus", 
                    JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                int idSetoran = (int) jTable1.getValueAt(selectedRow, 0);

                if (SetoranSampahModel.deleteSetoran(idSetoran)) {
                    JOptionPane.showMessageDialog(this, "Data berhasil dihapus!");
                    loadData();
                } else {
                    JOptionPane.showMessageDialog(this, "Gagal menghapus data!");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Pilih data yang ingin dihapus.");
        }
    }//GEN-LAST:event_hapusButtonActionPerformed

    private void konfirmasiButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_konfirmasiButtonActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
            int idSetoran = (int) jTable1.getValueAt(selectedRow, 0);
            String namaPenyetor = (String) jTable1.getValueAt(selectedRow, 1);
            int poin = (int) jTable1.getValueAt(selectedRow, 3);
            String status = (String) jTable1.getValueAt(selectedRow, 4);

            // Periksa apakah status sudah "Diterima" atau "Ditolak"
            if ("Diterima".equalsIgnoreCase(status) || "Ditolak".equalsIgnoreCase(status)) {
                JOptionPane.showMessageDialog(this, 
                    "Setoran ini sudah " + status.toLowerCase() + " dan tidak bisa dikonfirmasi lagi.", 
                    "Peringatan", 
                    JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Update status setoran menjadi "Diterima"
            if (SetoranSampahModel.updateStatus(idSetoran, "Diterima")) {
                if (SetoranSampahModel.updateUserPoin(namaPenyetor, poin)) {
                    JOptionPane.showMessageDialog(this, 
                        "Setoran berhasil dikonfirmasi!\nPenyetor mendapatkan " + poin + " poin.", 
                        "Sukses", 
                        JOptionPane.INFORMATION_MESSAGE);
                    loadData();
                } else {
                    JOptionPane.showMessageDialog(this, 
                        "Setoran dikonfirmasi, tetapi gagal memperbarui poin penyetor!", 
                        "Peringatan", 
                        JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, 
                    "Gagal mengkonfirmasi setoran!", 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, 
                "Pilih setoran terlebih dahulu.", 
                "Peringatan", 
                JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_konfirmasiButtonActionPerformed

    private void kembaliButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kembaliButtonActionPerformed
        DashboardAdmin dashboard = new DashboardAdmin();
        dashboard.setVisible(true);
        dashboard.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_kembaliButtonActionPerformed

    private void tolakButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tolakButtonActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
            String status = (String) jTable1.getValueAt(selectedRow, 4);

            // Periksa apakah status sudah "Diterima"
            if ("Diterima".equalsIgnoreCase(status)) {
                JOptionPane.showMessageDialog(this, 
                    "Setoran ini sudah diterima dan tidak dapat ditolak.", 
                    "Peringatan", 
                    JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Lanjutkan untuk menolak setoran
            int confirm = JOptionPane.showConfirmDialog(this, 
                    "Apakah Anda yakin ingin menolak setoran ini?", 
                    "Konfirmasi Tolak", 
                    JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                updateStatus("Ditolak");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Pilih setoran terlebih dahulu.");
        }
    }//GEN-LAST:event_tolakButtonActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KelolaSetoran.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KelolaSetoran.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KelolaSetoran.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KelolaSetoran.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new KelolaSetoran().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton hapusButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton kembaliButton;
    private javax.swing.JButton konfirmasiButton;
    private javax.swing.JButton tolakButton;
    // End of variables declaration//GEN-END:variables
}
